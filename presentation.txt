Vue

- 페이지별로 구분

1. Home

  - 내브바에 각각 라우터링크로 해당 뷰로 이동
  - 로그인 여부에 따라 내브바 내용이 달라짐
    - 로그인 O : 프로필, 로그아웃
    - 로그인 X : 로그인, 회원가입
  - 로그인이 안되어 있는 경우 : 로그인과 회원가입 페이지를 제외한 다른 페이지 이동시 로그인 페이지로 이동하도록 라우터가드 설정
  - 회원가입 : 알맞은 양식이 아니면 알림창을 띄워 수정하도록 유도함, 회원가입 이후 자연스럽게 로그인 페이지로 라우터 푸시.
  - 로그인 : 알맞은 양식이 아니면 알림창을 띄움. 로그인 이후 홈으로 이동

2. 영화조회

  - 실시간으로 tmdb api 요청을 통해 최신화되어있는 데이터를 불러옴옴
  - 높은 평점작, 인기 상영작, 현재 상영작, 최신 개봉작 으로 4가지로 분류하여 영화목록을 보여줌
  - 이미지 목록에는 그리드와 캐러셀을 이용해서 화면의 크기가 변함에 따라 반응형으로 화면 구성이 자연스럽게 바뀜
  - 각 카드 이미지와 내부의 텍스트들은 동일한 크기를 유지해서 화면 구성의 통일성을 유지
  - 영화 목록의 카드 요소를 클릭하면 해당 영화에 대한 디테일 페이지로 이동

3. 영화 디테일 페이지

  - tmdb에서 movie_id로 조회한 영화의 상세내용을 보여주는 페이지
  - 받아온 데이터를 파싱하여 해당 영화의 출연진을 보여주고 좌우 캐러셀을 이용해 목록을 더 볼 수 있음
  - 출연진 데이터에 필요한 내용이 없는 경우, v-if, v-show를 활용해서 자연스럽게 보이도록 함.
  - 영화 pick 기능
    - Django로 좋아요 post 요청을 보냄
    - 해당 유저의 토큰정보로 데이터베이스에 저장하고 프로필 페이지에서 확인 가능
  - 영화 예고편 기능 : 영화 제목 + 예고편 검색어를 youtube api 요청해서 나오는 결과물의 1번째 영상을 로드함.
  - 댓글 작성 & 다른 사용자의 프로필 보기
    - 본인과 다른 사용자를 구분하는 요소로는 username을 활용하고, 다른 사람에게 보이는 요소는 nickname 으로 구분함.
    - Django에 댓글 작성 post 요청을 보내고, 비동기로 작성된 댓글 목록을 새로고침 없이 확인 가능.
    - 본인이 작성한 댓글이면 삭제 버튼을, 다른 사람의 댓글이면 작성자의 프로필 페이지로 이동 가능.
    - 댓글 삭제기능 : Django에 delete 요청을 보냄
  
4. 다른 사용자의 프로필 페이지

  - 닉네임, 이메일 등 공개정보 확인 가능.
  - 팔로워, 팔로잉 수가 표시되며 팔로우 버튼을 누르면 비동기 토글로 새로고침없이 팔로워 수를 변화시킴
  - 해당 사용자가 pick한 영화목록들을 볼 수 있으며, 해당 영화의 카드를 누르면 디테일페이지로 라우터 푸시시킴.

5. 나의 프로필 페이지

  - 본인이기 때문에 ID 까지 표시됨.
  - 본인의 팔로워와 팔로잉 수를 볼 수 있음.
  - 회원 탈퇴 : 정말 회원탈퇴를 진행하겠냐는 알림이 뜨고 취소를 누르면 프로필로 돌아가고, 확인을 누르면 회원탈퇴가 진행됨.
  - 회원 정보 수정 : 정보 수정이 가능하며 비밀번호의 경우 2개가 동일하거나 문제가 있는경우 알림창을 띄워 알림

6. 리뷰 검색

  - 사용자가 관심이 있거나 다른 사람의 유튜브 리뷰 영상이 보고싶을 때 이용하는 기능
  - 영화 제목을 입력하면 youtube api로 요청을 보내 해당 영화에 알맞는 리뷰영상 목록들이 나옴.
  - 해당 목록의 카드를 클릭하면 유튜브 영상이 모달로 재생됨.
  
7. 영화 추천

  - KAKAO API 요청으로 도시명을 입력했을 때 나온 위도와 경도값을 받음.
  - WEATHER API 요청으로 위도와 경도를 보내면 해당 지역의 날씨 정보를 받아옴.
  - GEMINI API 요청 :
    - 프롬프트 엔지니어링으로 날씨에 어울리는 영화 리스트를 받아옴
    - 영화 리스트에서 처음 10개 값에 대해 재요청을 보내 영화 예고편과 gemini가 자체 분석한 영화에 대한 평론을 함께 제공함.

Django

1. 인증 설정

  - django-cors-headers : 특정 외부 출처의 요청을 해주는 역할
  - dj-rest-auth : Django REST API용 인증 / 계정 관리 기능 라이브러리
  - 각 view 함수에 대한 접근을 settings.py에 해두어 tokenauthenticated 방식으로 인증을 구현함

2. urls 관리

  - Django app은 accounts와 movies 2개가 있으며, 각 app의 요소에 접근할 때 include로 경로를 나눠 관리함
  - 회원 정보 기능에 접근할때만 프로젝트 폴더의 urls.py로 요청

3. 모델 설계

  - Movie, Comment, User 3가지 모델을 설계하고 사용함.
  - User : 
    - Django 기본 AbstractUser를 커스텀하여 회원가입시 성별, 나이, 닉네임, 선호하는 장르를 추가로 입력받고 저장함.
    - manytomanyfield로 사용자간 팔로우 기능을 구현
  - Movie: 
    - 데이터베이스에 저장된 영화를 로드하는 것이 아니기 때문에 사용자가 좋아요를 누른 영화만을 저장함.
    - 영화별 디테일 페이지를 로드하고 관리하기 위해 tmdb에서 영화를 받아오는데 필요한 필드로 설계함
  - comment:
    - 사용자들이 입력한 댓글들을 저장하기 위한 모델

4. 시리얼라이저

  - 영화 pick : get, post
  - 댓글 목록 : get, post
  - 댓글 삭제 : delete
  - 유저 정보 : get ( 유저 정보와 좋아요한 영화를 동시에 가져올 수 있는 시리얼라이저)
  - 다른 유저 정보 : get
  - follow : get, post
  - 유저 정보 수정 : delete, put
